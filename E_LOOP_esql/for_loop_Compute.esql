

CREATE COMPUTE MODULE for_loop_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		--SET OutputRoot = InputRoot;
		
--		DECLARE str REFERENCE TO InputRoot.XMLNSC;
--		DECLARE data BLOB ASBITSTREAM(str);
--		
--		DECLARE oData CHARACTER CAST(data AS CHARACTER);
		
		DECLARE inputString CHARACTER;
		DECLARE wd BLOB InputRoot.BLOB.BLOB;
		SET inputString = CAST(wd AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
		SET inputString = RTRIM(inputString);
		SET inputString = LTRIM(inputString);
		
		IF STARTSWITH(inputString , '{')  THEN			 
			 SET OutputRoot = NULL;
       		 SET OutputRoot.Properties = InputRoot.Properties;
 			 CREATE LASTCHILD OF OutputRoot DOMAIN('JSON') PARSE(InputRoot.BLOB.BLOB);  
    	     
			 PROPAGATE TO TERMINAL 'out1';
				
		ELSEIF STARTSWITH(inputString, '<') THEN			
			 SET OutputRoot = NULL;
       		 SET OutputRoot.Properties = InputRoot.Properties;
    	     CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') PARSE(InputRoot.BLOB.BLOB, InputRoot.Properties.Encoding, InputRoot.Properties.CodedCharSetId);
			
			 PROPAGATE TO TERMINAL 'out2';
		
		ELSE	
			SET OutputRoot.JSON.Data = 'invalid input type';
			PROPAGATE TO TERMINAL 'out1';
		END IF;
			
		
 		
		
		
		
		
	END;
END MODULE;
